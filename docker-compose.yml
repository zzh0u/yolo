version: '3.8'

services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: yolo-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - yolo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: ${PG_HEALTH_CHECK_INTERVAL}
      timeout: ${PG_HEALTH_CHECK_TIMEOUT}
      retries: ${PG_HEALTH_CHECK_RETRIES}

  # Go 后端 API 服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        APP_USER_ID: ${APP_USER_ID}
        APP_GROUP_ID: ${APP_GROUP_ID}
    container_name: yolo-backend
    environment:
      # 数据库配置
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: ${DB_SSLMODE}
      # 应用配置
      GIN_MODE: ${GIN_MODE}
      JWT_SECRET: ${JWT_SECRET}
      # Web3 配置
      INJ_EVM_RPC_URL: ${INJ_EVM_RPC_URL}
      PRIVATE_KEY: ${PRIVATE_KEY}
    ports:
      - "${BACKEND_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - yolo-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: ${HEALTH_CHECK_INTERVAL}
      timeout: ${HEALTH_CHECK_TIMEOUT}
      retries: ${HEALTH_CHECK_RETRIES}
      start_period: ${HEALTH_CHECK_START_PERIOD}

  # Next.js 前端服务
  frontend:
    build:
      context: ./frontend-yolo
      dockerfile: Dockerfile
      args:
        APP_USER_ID: ${APP_USER_ID}
        APP_GROUP_ID: ${APP_GROUP_ID}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    container_name: yolo-frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - yolo-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  yolo-network:
    driver: bridge